{"version":3,"sources":["App.tsx","index.tsx"],"names":["i18n","use","initReactI18next","init","resources","en","translation","language","description","name","surname","phone","email","message","submit","ru","lng","fallbackLng","interpolation","escapeValue","INITIAL_FORM_STATE","firstName","lastName","phoneRegExp","FORM_VALIDATION_EN","yup","shape","required","matches","min","max","FORM_VALIDATION_RU","useStyles","makeStyles","theme","createStyles","body","backgroundColor","paper","marginTop","display","flexDirection","justifyContent","alignItems","border","boxShadow","borderRadius","padding","width","margin","lang","App","t","useTranslation","React","useState","langValidationForm","setLangValidationForm","classes","fallback","Container","component","maxWidth","FormControl","className","InputLabel","htmlFor","Select","native","onChange","event","changeLanguage","target","value","inputProps","id","Typography","variant","initialValues","validationSchema","onSubmit","values","console","log","errors","handleChange","touched","Grid","container","spacing","item","xs","sm","TextField","error","autoComplete","fullWidth","label","autoFocus","helperText","multiline","rows","Button","type","color","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c70e7f2.chunk.js","sourcesContent":["import React, { Suspense } from 'react';\nimport { Formik, Form } from 'formik';\nimport * as yup from 'yup';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Button from \"@material-ui/core/Button\";\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport i18n from 'i18next';\nimport { initReactI18next, useTranslation } from 'react-i18next';\n\n\nconst translationEn = {\n  language: 'Language',\n  description: 'Send message form',\n  name: 'Name',\n  surname: 'Surname',\n  phone: 'Phone',\n  email: 'Email adress',\n  message: 'Message',\n  submit: 'Submit',\n};\nconst translationRu = {\n  language: 'Язык',\n  description: 'Форма отправки сообщений',\n  name: 'Имя',\n  surname: 'Фамилия',\n  phone: 'Телефон',\n  email: 'Email адрес',\n  message: 'Сообщение',\n  submit: 'Отправить',\n};\n\ni18n\n  .use(initReactI18next)\n  .init({\n    resources: {\n      en: { translation: translationEn },\n      ru: { translation: translationRu },\n    },\n    lng: 'en',\n    fallbackLng: 'en',\n    interpolation: { escapeValue: false },\n  });\n\ninterface MyFormValues {\n  firstName: string;\n  lastName: string;\n  phone: string;\n  email: string;\n  message: string;\n}\n\nconst INITIAL_FORM_STATE: MyFormValues = {\n  firstName: \"\",\n  lastName: \"\",\n  phone: \"\",\n  email: \"\",\n  message: \"\"\n};\n\nconst phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n\nlet FORM_VALIDATION_EN = yup.object().shape({\n  firstName: yup.string().required(\"This field is required\"),\n  lastName: yup.string(),\n  phone: yup\n    .string()\n    .required(\"This field is required\")\n    .matches(phoneRegExp, 'Phone number is not valid')\n    .min(11, \"to short\")\n    .max(11, \"to long\"),\n  email: yup\n    .string()\n    .email(),\n  message: yup\n    .string()\n    .required(\"This field is required\")\n    .min(10, \"Massage is too short\")\n    .max(200, \"Massage is too long\")\n});\n\nlet FORM_VALIDATION_RU = yup.object().shape({\n  firstName: yup.string().required(\"Это поле обязательное\"),\n  lastName: yup.string(),\n  phone: yup\n    .string()\n    .required(\"Это поле обязательное\")\n    .matches(phoneRegExp, 'Неверный номер телефона')\n    .min(11, \"мало цифр\")\n    .max(11, \"много цифр\"),\n  email: yup\n    .string()\n    .email(),\n  message: yup\n    .string()\n    .required(\"Это поле обязательное\")\n    .min(10, \"Сообщение слишком короткое\")\n    .max(200, \"Сообщение слишком длинное\")\n});\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    \"@global\": {\n      body: {\n        backgroundColor: '#67E667',\n      },\n    },\n\n    paper: {\n      marginTop: '100px',\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"flex-end\",\n      alignItems: \"center\",\n      border: '1px solid #858585',\n      boxShadow: '0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%)',\n      borderRadius: '16px',\n      padding: '50px',\n      width: '500px',\n      backgroundColor: '#fff',\n\n\n    },\n\n    description: {\n      margin: '0 0 30px 0',\n    },\n    lang: {\n      margin: '10px 0 0 0',\n    },\n    submit: {\n      width: 'fit-content',\n      margin: '10px',\n      borderRadius: '0px',\n      backgroundColor: '#FF9700',\n      '&:hover': {\n        backgroundColor: '#08a652',\n      },\n    },\n\n  }));\n\n\n\n\nexport const App: React.FC<{}> = () => {\n\n  const { t } = useTranslation();\n  const [langValidationForm, setLangValidationForm] = React.useState(FORM_VALIDATION_EN);\n\n  const classes = useStyles();\n\n  const handleChangeLang = (event: any) => {\n    i18n.changeLanguage(event.target.value);\n\n    if (langValidationForm === FORM_VALIDATION_EN) {\n      setLangValidationForm(FORM_VALIDATION_RU);\n    }\n\n    if (langValidationForm === FORM_VALIDATION_RU) {\n      setLangValidationForm(FORM_VALIDATION_EN);\n    }\n\n  }\n\n  return (\n    <Suspense fallback=\"Loading...\">\n      <Container component=\"main\" maxWidth=\"xs\">\n\n        <FormControl className={classes.lang} >\n          <InputLabel htmlFor=\"age-native-required\">{t('language')}</InputLabel>\n          <Select\n            native\n            // value={state.age}\n            onChange={handleChangeLang}\n            name=\"age\"\n            inputProps={{\n              id: 'age-native-required',\n            }}\n          >\n            <option value='en'>English</option>\n            <option value='ru'>Русский</option>\n\n\n          </Select>\n        </FormControl>\n\n        <div className={classes.paper}>\n          <Typography className={classes.description} component=\"h1\" variant=\"h5\" >\n            {t('description')}\n          </Typography>\n          <Formik\n            initialValues={{\n              ...INITIAL_FORM_STATE\n            }}\n            validationSchema={langValidationForm}\n            onSubmit={values => {\n              console.log(values)\n            }}\n          >\n            {({ errors, handleChange, touched }) => (\n              <Form>\n                <Grid container spacing={2}>\n\n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      error={errors.firstName && touched.firstName ? true : false}\n                      autoComplete=\"name\"\n                      onChange={handleChange}\n                      name=\"firstName\"\n                      variant=\"outlined\"\n                      fullWidth\n                      id=\"firstName\"\n                      label={t('name')}\n                      autoFocus\n                      helperText={\n                        errors.firstName && touched.firstName ? errors.firstName : null\n                      }\n                    />\n                  </Grid>\n\n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      error={errors.lastName && touched.lastName ? true : false}\n                      variant=\"outlined\"\n                      fullWidth\n                      id=\"lastName\"\n                      label={t('surname')}\n                      name=\"lastName\"\n                      autoComplete=\"surname\"\n                      onChange={handleChange}\n                      helperText={\n                        errors.lastName && touched.lastName\n                          ? errors.lastName\n                          : null\n                      }\n                    />\n                  </Grid>\n\n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      error={errors.phone && touched.phone ? true : false}\n                      variant=\"outlined\"\n                      fullWidth\n                      id=\"phone\"\n                      label={t('phone')}\n                      name=\"phone\"\n                      autoComplete=\"phone\"\n                      onChange={handleChange}\n                      helperText={\n                        errors.phone && touched.phone\n                          ? errors.phone\n                          : null\n                      }\n                    />\n                  </Grid>\n\n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      error={errors.email && touched.email ? true : false}\n                      variant=\"outlined\"\n                      fullWidth\n                      id=\"email\"\n                      label={t('email')}\n                      name=\"email\"\n                      autoComplete=\"email\"\n                      onChange={handleChange}\n                      helperText={\n                        errors.email && touched.email\n                          ? errors.email\n                          : null\n                      }\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <TextField\n                      error={errors.message && touched.message ? true : false}\n                      variant=\"outlined\"\n                      fullWidth\n                      id=\"message\"\n                      label={t('message')}\n                      name=\"message\"\n                      autoComplete=\"message\"\n                      multiline={true}\n                      rows={4}\n                      onChange={handleChange}\n                      helperText={\n                        errors.message && touched.message\n                          ? errors.message\n                          : null\n                      }\n                    />\n                  </Grid>\n\n                  <Button\n                    type=\"submit\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className={classes.submit}\n                  >\n                    {t('submit')}\n                  </Button>\n\n                </Grid>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </Container>\n    </Suspense>\n  );\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}